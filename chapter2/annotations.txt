Scala is usually able to infer the return types of methods, so they can be omitted, but it's generally considered good style to explicitly declare the return types of methods that you expect others to use.

When the body of the method contains more than one statement, we put them inside curly braces.

A val is an immutable variable, so inside the body of the formatAs method the name msg will always refer to the same String value (example 1). The Scala compiler will complain if you try to reassign msg to a different value in the same context.

We can bring all of an object's (non-private) members into scope by using the underscore syntax: import MyModule._

Note that even an expression like 2 + 1 is just calling a member of an object. In that case what is being called is the + member of the object 2. It is really syntactic sugar for the expression 2.+(1). We can in general omit the dot and parentheses like that when calling a method and applying it to a single argument. For example, instead of MyModule.abs(42) we can say MyModule abs 42 and get the same result.

A function that takes another function as an argument is called a higher-order function (HOF). Like any other function parameter, we give a type to f, the type Int => Int, which indicates that f expects an Int and will also return an Int. (The type of a function expecting an Int and a String and returning an Int would be written as (Int,String) => Int.)

We have said that functions and methods are not exactly the same thing in Scala. When we define a function literal, what is actually being defined is an object with a method called apply.

